MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "01,November,2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "19:52:24" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                01,November,2019
Time:                19:52:24
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O050HWM2 "C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O050HWM2 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "01,November,2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "19:52:24" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Darren";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                11002832";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_8HOME";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M3P062415";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "01,November,2019" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "19:52:24" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Darren";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
21284      proc freq data=EMWS1.FIMPORT_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.FIMPORT_VariableSet noprint;
21285      table ROLE*LEVEL/out=WORK.FIMPORTMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.FIMPORTMETA;
21286      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 21 observations read from the data set EMWS1.FIMPORT_VARIABLESET.
NOTE: The data set WORK.FIMPORTMETA has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.15 seconds
      cpu time            0.01 seconds
      

21287      proc print data=WORK.FIMPORTMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.FIMPORTMETA label noobs;
21288      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
21289      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
21290      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
21291      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
21292      run;

NOTE: There were 4 observations read from the data set WORK.FIMPORTMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

21293      title10;
MPRINT(EM_DIAGRAM):   title10;
21294      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'project_asylum';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Project';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21644      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21645      * FIMPORT: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * FIMPORT: Generation of macros and macro variables;
21646      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
21647      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

21648      %let EMEXCEPTIONSTRING=;
21649      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21650      * TRAIN: FIMPORT;
MPRINT(EM_DIAGRAM):   * TRAIN: FIMPORT;
21651      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21652      %let EM_ACTION = TRAIN;
21653      %let syscc = 0;
21654      /* Fimport.source */
21655      %macro main;
21656            %if %upcase(&EM_ACTION) = CREATE %then %do;
21657               filename temp catalog 'sashelp.emsamp.Fimport_create.source';
21658               %include temp;
21659               filename temp;
21660               %create;
21661            %end;
21662            %else
21663            %if %upcase(&EM_ACTION) = TRAIN %then %do;
21664               filename temp catalog 'sashelp.emsamp.Fimport_train.source';
21665               %include temp;
21666               filename temp;
21667               %train;
21668            %end;
21669            %else
21670            %if %upcase(&EM_ACTION) = UPDATE %then %do;
21671               filename temp catalog 'sashelp.emsamp.Fimport_update.source';
21672               %include temp;
21673               filename temp;
21674               %update;
21675            %end;
21676            %else
21677            %if %upcase(&EM_ACTION) = PROPERTY %then %do;
21678               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
21679               %include temp;
21680               filename temp;
21681               %property;
21682            %end;
21683             %else
21684            %if %upcase(&EM_ACTION) = SCORE %then %do;
21685               filename temp catalog 'sashelp.emsamp.Fimport_score.source';
21686               %include temp;
21687               filename temp;
21688               %score;
21689            %end;
21690            %else
21691            %if %upcase(&EM_ACTION) = REPORT %then %do;
21692               filename temp catalog 'sashelp.emsamp.Fimport_report.source';
21693               %include temp;
21694               filename temp;
21695               %report;
21696            %end;
21697            %else
21698            %if %upcase(&EM_ACTION) = OPENVARIABLESET %then %do;
21699               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
21700               %include temp;
21701               filename temp;
21702               %openvariableset;
21703            %end;
21704            %else
21705            %if %upcase(&EM_ACTION) = CLOSEVARIABLESET %then %do;
21706               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
21707               %include temp;
21708               filename temp;
21709               %closevariableset;
21710            %end;
21711      %mend main;
21712      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emsamp.Fimport_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMSAMP.FIMPORT_TRAIN.SOURCE.
21713     +%EM_GETNAME(key=USERIMPORTFILE, type=FILE, extension=txt);
MPRINT(MAIN):  ;
21714     +%macro appendExt;
21715     +   data _null_;
21716     +      tempuif =  trim("&EM_USER_USERIMPORTFILE");
21717     +      rfile = reverse(tempuif);
21718     +      period = indexc(rfile,".");
21719     +      uif = substr(tempuif, 1, length(tempuif)- period+1);
21720     +      newuif = trim(uif)||trim("&EM_PROPERTY_FILETYPE");
21721     +      call symput("EM_USER_USERIMPORTFILE",%bquote(newuif));
21722     +   run;
21723     +%mend appendExt;
21725     +%macro getNobs(ds);
21726     + %global dset nobs;
21727     + %let dset=&ds;
21728     + %let dsid = %sysfunc(open(&dset));
21729     + %if &dsid %then %do;
21730     +      %let nobs =%sysfunc(attrn(&dsid,nobs));
21731     +      %let rc = %sysfunc(close(&dsid));
21732     +   %end;
21733     + %else %put open for data set &dset failed - %sysfunc(sysmsg());
21734     +%mend getNobs;
21735     +%macro keepordrop;
21736     +  proc contents data=work.importfile noprint
21737     +  out=work.importattrs;
21738     +  run;
21739     +  %getNobs(work.importattrs);
21740     +  data _null_;
21741     +    set  work.importattrs;
21742     +    call symput("varname"||left(_n_),name);
21743     +  run;
21745     +  %put nobs=&nobs  maxcols=&EM_PROPERTY_MAXCOLS;
21746     +  /* importattrs contains 1 observation for each VARIABLE in the data set. */
21747     +  %if &nobs > &EM_PROPERTY_MAXCOLS %then %do;
21748     +     %let diff = %eval(&nobs - &EM_PROPERTY_MAXCOLS);
21749     +     %put diff=&diff;
21750     +     %if %eval(&diff ge &EM_PROPERTY_MAXCOLS) %then %do;
21751     +         %let kORd = keep;
21752     +             %let start=1;
21753     +             %let end = &EM_PROPERTY_MAXCOLS;
21754     +       %end;
21755     +     %else %do;
21756     +         %let kORd = drop;
21757     +             %let start = &EM_PROPERTY_MAXCOLS + 1;
21758     +             %let end = &nobs;
21759     +       %end;
21760     +     data &em_user_data;
21761     +        set &em_user_data;
21762     +        &kORd
21763     +        %do i = &start %to &end;
21764     +            &&varname&i
21765     +         %end;
21766     +        ;
21767     +     run;
21768     +%end;
21769     +%mend keepordrop;
21770     +%macro dropformatvars;
21771     +   %put fmtcnt=&fmtcnt;
21772     +   data new;
21773     +     set work.importfile;
21774     +     %do i = 1 %to &fmtcnt;
21775     +       x1zy&i =put(&&varname&i,&&fmt&i);
21776     +     %end;
21777     +   run;
21778     +   data new;
21779     +     set new;
21780     +     drop
21781     +     %do i = 1 %to &fmtcnt;
21782     +     &&varname&i
21783     +     %end;
21784     +     ;
21785     +   run;
21786     +   proc datasets library=work nolist;
21787     +     modify new;
21788     +     %do i = 1 %to &fmtcnt;
21789     +     rename x1zy&i=&&varname&i;
21790     +     %end;
21791     +   run; quit;
21792     +   data work.importfile;
21793     +     set new;
21794     +   run;
21795     +%mend;
21797     +%macro procimport(out=);
21798     +   %if %upcase(&EM_PROPERTY_FILETYPE)=MDB %then %do;
21799     +      proc import table=%sysfunc(trim(&EM_PROPERTY_ACCESSTABLE))
21800     +         out=&out
21801     +         dbms = ACCESS
21802     +         replace;
21803     +         database="%trim(&_IFILENAME)"
21804     +   %end;
21805     +   %else %do;
21806     +       proc import datafile="%trim(&_IFILENAME)"
21807     +          out=&out
21809     +      %put filetype=*&EM_PROPERTY_FILETYPE.*;
21810     +      %put delimiter=*&EM_PROPERTY_DELIMITER.*;
21811     +      %if %upcase(&EM_PROPERTY_FILETYPE) ^= TXT %then %do;
21812     +         dbms=&EM_PROPERTY_FILETYPE
21813     +      %end;
21814     +      %else %do;
21815     +         dbms=TAB
21816     +      %end;
21817     +      /* Work around for the following defects:S0560899 and S0560009.   */
21818     +      %let sasEnv=%sysfunc(getlocenv());
21819     +      %if %upcase(&EM_PROPERTY_FILETYPE) = XLS and %upcase(&sasEnv) ^= SBCS %then %do;
21820     +         dbms=EXCEL
21821     +      %end;
21823     +      replace;
21824     +      %if %substr(%upcase(&EM_PROPERTY_FILETYPE),1,2)=WK | %upcase(&EM_PROPERTY_FILETYPE)=XLS
21825     +       | %upcase(&EM_PROPERTY_FILETYPE)=DLM | %upcase(&EM_PROPERTY_FILETYPE)=CSV
21826     +       | %upcase(&EM_PROPERTY_FILETYPE)=TAB | %upcase(&EM_PROPERTY_FILETYPE)=TXT %then %do;
21827     +        %if %length(&EM_PROPERTY_NAMEROW) > 0 %then %do;
21828     +            getnames=&EM_PROPERTY_NAMEROW;
21829     +        %end;
21830     +      %end;
21831     +      %if %upcase(&EM_PROPERTY_FILETYPE)=CSV | %upcase(&EM_PROPERTY_FILETYPE)=DLM |
21832     +          %upcase(&EM_PROPERTY_FILETYPE=TXT)  %then %do;
21833     +         %if (%length(%trim(%bquote(&EM_PROPERTY_DELIMITER))) > 0) %then %do;
21834     +            %if "%upcase(&EM_PROPERTY_DELIMITER)"="SP" %then %do;
21835     +               delimiter=" ";
21836     +            %end;
21837     +            %else %if "%upcase(&EM_PROPERTY_DELIMITER)"="TAB" %then %do;
21838     +               /* Do not specifiy a delimiter */
21839     +            %end;
21840     +            %else %do;
21841     +               delimiter="&EM_PROPERTY_DELIMITER";
21842     +            %end;
21843     +         %end;
21844     +         %if %eval(&EM_PROPERTY_SKIPROWS > 0) %then %do;
21845     +            datarow=&EM_PROPERTY_SKIPROWS;
21846     +            /* Guessingrows must be >= skiprows */
21847     +            %if %eval(&EM_PROPERTY_GUESSROWS < &EM_PROPERTY_SKIPROWS ) %then %do;
21848     +              %let EM_PROPERTY_GUESSROWS = &EM_PROPERTY_SKIPROWS;
21849     +            %end;
21850     +         %end;
21851     +         %if %eval(&EM_PROPERTY_GUESSROWS > 0) %then %do;
21852     +            guessingrows=&EM_PROPERTY_GUESSROWS;
21853     +         %end;
21854     +       %end;
21855     +      %if %upcase(&EM_PROPERTY_FILETYPE)=DTA | %upcase(&EM_PROPERTY_FILETYPE)=JMP
21856     +                 | %upcase(&EM_PROPERTY_FILETYPE)=SAV %then %do;
21857     +            FMTLIB = work.formats;
21858     +      %end;
21859     +   %end;
21860     +   run;
21861     +%mend procimport;
21863     +%macro train;
21865     +   %let vvnString = %sysfunc(getoption(validvarname));
21867     +   %em_getname(key=DATA,           type=DATA);
21868     +   %em_getname(key=EMCMETADEFAULT, type=DATA);
21869     +   %em_getname(key=EMTMETADEFAULT, type=DATA);
21870     +   %em_getname(key=EMSTATDEFAULT, type=DATA);
21872     +   %appendExt;
21874     +   %let _IFILENAME = %nrbquote(%trim(&EM_PROPERTY_IFILENAME));
21875     +   %if %upcase(&EM_PROPERTY_IMPORTTYPE) = LOCAL %then %do;
21876     +       %if %nrbquote(%sysfunc(fileexist(&EM_USER_USERIMPORTFILE))) %then
21877     +           %let _IFILENAME = %nrbquote(&EM_USER_USERIMPORTFILE);
21878     +   %end;
21880     +   %if ^%sysfunc(fileexist(%nrbquote(&_IFILENAME))) %then %do;
21881     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTRAININGCODEFILE,%nrbquote(&_IFILENAME);
21882     +       %goto endtrain;
21883     +   %end;
21885     +   options validvarname=ANY;
21886     +   %procimport(out=work.importfile);
21888     +   %if %upcase(&EM_PROPERTY_FILETYPE) = DTA | %upcase(&EM_PROPERTY_FILETYPE) = JMP
21889     +              | %upcase(&EM_PROPERTY_FILETYPE)=SAV %then %do;
21890     +      %global fmtcnt;
21891     +      %let fmtcnt=0;
21892     +      proc contents data=work.importfile out=work.impattrs noprint;
21893     +      run;
21894     +      data _null_;
21895     +        set work.impattrs;
21896     +        if _n_=1 then i=0;
21897     +        if substr(format,1,1) ^= "$" and length(trim(format)) > 1 then do;
21898     +           i = i+1;
21899     +           varname = substr(name, 1, length(name));
21900     +           call symput("fmt"||left(i), trim(format)||".");
21901     +           call symput("varname"||left(i), varname);
21902     +           call symput("fmtcnt",left(i));
21903     +      end;
21904     +      retain i;
21905     +     run;
21906     +    %if &fmtcnt > 0 %then %do;
21907     +       %dropformatvars;
21908     +    %end;
21909     +    proc datasets lib=work memtype=data nolist;
21910     +        modify importfile;
21911     +        attrib _all_ format=;
21912     +    run;
21913     +    quit;
21914     +   %end;
21916     +   %let _fimportObs  = 0;
21917     +   %let _fimportVars = 0;
21918     +   %if %sysfunc(exist(work.importFile)) %then %do;
21919     +       %let dsid = %sysfunc(open(work.importFile));
21920     +       %if &dsid %then %do;
21921     +           %let _fimportObs  = %sysfunc(attrn(&dsid, NOBS));
21922     +           %let _fimportVars = %sysfunc(attrn(&dsid, NVARS));
21923     +       %let dsid = %sysfunc(close(&dsid));
21924     +       %end;
21925     +   %end;
21927     +   %if ^&_fimportObs %then %do;
21928     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.FILE_NO_OBS;
21929     +       %goto endtrain;
21930     +   %end;
21931     +   %if ^&_fimportVars %then %do;
21932     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.FILE_NO_VARS;
21933     +       %goto endtrain;
21934     +   %end;
21936     +   data &em_user_data;
21937     +      set work.importfile(obs=&EM_PROPERTY_MAXROWS);
21938     +   run;
21939     +   %keepordrop;
21941     +   %em_getname(key=EMSTAT,     type=DATA);
21943     +   proc datasets lib=&em_lib nolist;
21944     +      delete &em_nodeid._EMSTATDEFAULT &em_nodeid._EMINFO;
21945     +   run;
21947     +   %if "&em_property_advancedadvisor" eq "Y" %then %do;
21948     +        %EmAdviseColumns(&em_user_data, applyIntervalLevelLowerLimit=Y,
21949     +            intervalLevelLowerLimit=20, applyMaxPercentMissing=Y,
21950     +            maxPercentMissing=50, applyMaxClassLevels=Y,
21951     +            maxClassLevels=20, identifyEmptyColumns=Y,
21952     +            outdata=&em_user_EMCMETADEFAULT,
21953     +            computeStat=Y, statisticData=&em_user_EMSTATDEFAULT);
21955     +        data &em_user_emcmetadefault;
21956     +           set &em_user_emcmetadefault;
21957     +           drop nlevel pctmiss min max mean std skewness kurtosis;
21958     +        run;
21960     +        data &em_data_eminfo;
21961     +           length TARGET KEY $32  DATA $43;
21962     +           TARGET=""; KEY="STATS"; DATA="&em_user_emstatdefault"; output;
21963     +        run;
21965     +        %let EM_META_ADVISOR=ADVANCED;
21967     +   %end;
21968     +   %else %do;
21969     +       %EmAdviseColumns(&em_user_data, applyIntervalLevelLowerLimit=N,
21970     +            applyMaxPercentMissing=N, applyMaxClassLevels=N,
21971     +            identifyEmptyColumns=N,   maxLevelDetection=0,
21972     +            outdata=&em_user_EMCMETADEFAULT, computeStat=N, statisticData=WORK.STATISTIC);
21974     +            %if "&em_property_summarize" eq "Y" %then %do;
21975     +                %em_getname(key=EMSTAT,  type=DATA);
21976     +                data &em_data_eminfo;
21977     +                   length TARGET KEY $32  DATA $43;
21978     +                   TARGET=""; KEY="STATS"; DATA="&em_user_emstat"; output;
21979     +                run;
21980     +            %end;
21982     +        %let EM_META_ADVISOR=BASIC;
21984     +   %end;
21986     +   %em_getname(key=VVNLABEL, type=FILE, extension=sas);
21987     +   data _null_;
21988     +      fname = '_text';
21989     +      rc=filename(fname, "&em_user_vvnlabel");
21990     +      if ^rc and fexist(fname) then
21991     +         rc=fdelete(fname);
21992     +     rc=filename(fname);
21993     +   run;
21996     +   /* Validvarname Case */
21997     +   %let newNameFlag = 0;
21998     +   %if %sysfunc(exist(&em_user_EMCMETADEFAULT)) %then %do;
21999     +       %let dsid = %sysfunc(open(&em_user_EMCMETADEFAULT));
22000     +        %if &dsid %then %do;
22001     +            %let newNameFlag = %sysfunc(varnum(&dsid, NEWNAME));
22002     +            %let dsid = %sysfunc(close(&dsid));
22003     +       %end;
22004     +   %end;
22006     +   %if %sysevalf(&newNameFlag>0) %then %do;
22007     +       proc contents data=work.importfile noprint out=work._any(keep=VARNUM NAME LABEL);
22008     +       run;
22009     +       proc sort data=work._any; by VARNUM; run; quit;
22011     +       options validvarname=V7;
22013     +       %procimport(out=work.importfile2);
22015     +       options validvarname=ANY;
22017     +       proc contents data=work.importfile2 noprint out=work._v7(rename=(NAME=V7NAME) keep=VARNUM NAME LABEL);
22018     +       run;
22019     +       proc sort data=work._v7; by varnum; run; quit;
22021     +       filename _FI "&em_user_vvnlabel";
22022     +       data work._names;
22023     +          length string $200;
22024     +          merge work._v7 work._any;
22025     +          by VARNUM;
22026     +          file _FI;
22027     +          if V7NAME ne NAME then do;
22028     +             string = trim(V7NAME)!!'= "'!!tranwrd(trim(NAME), '"', '""')!!'"n;';
22029     +             put string;
22030     +             if LABEL eq '' then do;
22031     +                string = 'Label '!!trim(V7NAME)!!"='"!!tranwrd(trim(NAME), "'", "''")!!"';";
22032     +                put string;
22033     +             end;
22034     +             string='drop "'!!tranwrd(trim(NAME), '"', '""')!!'"n;';
22035     +             put string;
22036     +          end;
22037     +          drop string;
22038     +       run;
22039     +       data &em_user_data;
22040     +          set &em_user_data;
22041     +          %if %sysfunc(fileexist(%nrbquote(&em_user_vvnlabel))) %then %do;
22042     +              filename _FI "&em_user_vvnlabel";
22043     +              %inc _FI;
22044     +             filename _FI;
22045     +          %end;
22046     +       run;
22048     +       proc sort data=&em_user_EMCMETADEFAULT; by NAME; run;
22049     +       proc sort data=work._names;             by NAME; run;
22051     +       data &em_user_EMCMETADEFAULT;
22052     +         merge  &em_user_EMCMETADEFAULT _names;
22053     +         by NAME;
22054     +         length DROP $1;
22055     +         DROP='N';
22056     +         if NEWNAME ne NAME then do;
22057     +            if LABEL eq '' then do;
22058     +               LABEL = NAME;
22059     +            end;
22060     +            NAME=V7NAME;
22061     +         end;
22062     +         drop NEWNAME V7NAME VARNUM;
22063     +       run;
22065     +       proc datasets lib=work nolist;
22066     +          delete _any _v7 _names importfile2;
22067     +       run;
22068     +       quit;
22070     +   %end;
22071     +   %else %do;
22072     +       data &em_user_EMCMETADEFAULT;
22073     +          set &em_user_EMCMETADEFAULT;
22074     +          length DROP $1;
22075     +          DROP='N';
22076     +       run;
22077     +   %end;
22079     +    %EmAdviseTable(&em_user_data, outdata=&em_user_EMTMETADEFAULT, newdataflag=Y);
22081     +   data _temp;
22082     +      set &em_user_emtmetadefault(rename=(ROLE=PORT MEMNAME=DATASET CRDATE=MODTIME));
22083     +      keep PORT LIBNAME DATASET MODTIME COLUMNMETA COLUMNMETAMODTIME NOBS;
22084     +      PORT='DATA'; COLUMNMETA="&em_nodeid._EMCMETADEFAULT";
22085     +      COLUMNMETAMODTIME=MODTIME;
22086     +   run;
22087     +   proc sort data=&em_data_importset;
22088     +      by PORT;
22089     +   run;
22090     +   data &em_data_importset;
22091     +      merge &em_data_importset _temp;
22092     +      by PORT;
22093     +      if PORT='DATA' then ROLE="&em_property_role";
22094     +   run;
22096     +    %em_getname(key=VARIABLESETDELTA, type=FILE, extension=txt);
22098     +    %if %sysfunc(exist(&em_user_emcmetadefault)) %then %do;
22099     +        %if %sysfunc(fileexist(&em_user_variablesetdelta)) %then %do;
22100     +            filename x "&em_user_variablesetdelta";
22101     +            data &em_data_variableset;
22102     +               set &em_user_emcmetadefault;
22103     +               %inc X;
22104     +            run;
22105     +            filename x;
22106     +        %end;
22107     +        %else %do;
22108     +            data &em_data_variableset;
22109     +               set &em_user_emcmetadefault;
22110     +            run;
22111     +        %end;
22112     +    %end;
22114     +   %if %sysfunc(exist(&em_data_variableset)) and %sysfunc(exist(&em_user_emcmetadefault)) %then %do;
22115     +      proc compare compare=&em_data_variableset base=&em_user_emcmetadefault
22116     +         noprint outnoequal outbase outcomp out=_DiffMeta noprint;
22117     +         id NAME;
22118     +      run;
22120     +         filename x1 "&EM_FILE_CDELTA_TRAIN";
22121     +         data _null_;
22122     +            length string $200;
22123     +            set _DiffMeta end=eof;
22124     +            where _type_='COMPARE';
22125     +            file x1;
22126     +            string = 'if NAME="'!!strip(NAME)!!'" then do;';
22127     +            put string;
22128     +            string = '   ROLE="'!!strip(ROLE)!!'";';
22129     +            put string;
22130     +            string=  '   LEVEL="'!!strip(LEVEL)!!'";';
22131     +            put string;
22132     +            string = '   ORDER="'!!strip(ORDER)!!'";';
22133     +            put string;
22134     +            put 'end;';
22135     +            if drop='Y' then do;
22136     +               string='if NAME="'!!strip(NAME)!!'" then delete;';
22137     +               put string;
22138     +            end;
22139     +            if eof then
22140     +               put 'drop DROP;';
22141     +         run;
22143     +         %em_getname(key=DELTACODE,      type=FILE, extension=txt);
22144     +         filename x2 "&em_user_deltacode";
22145     +         %em_copyfile(infref=x1, outfref=x2);
22146     +         filename x1;
22147     +         filename x2;
22149     +         %em_getname(key=VARIABLESETDELTA, type=FILE, extension=txt);
22150     +         filename x "&em_user_variablesetdelta";
22151     +         data _null_;
22152     +            length string $200;
22153     +            set _DiffMeta end=eof;
22154     +            where _type_='COMPARE';
22155     +            file x;
22156     +            string = 'if NAME="'!!strip(NAME)!!'" then do;';
22157     +            put string;
22158     +            string = '   ROLE="'!!strip(ROLE)!!'";';
22159     +            put string;
22160     +            string=  '   LEVEL="'!!strip(LEVEL)!!'";';
22161     +            put string;
22162     +            string = '   ORDER="'!!strip(ORDER)!!'";';
22163     +            put string;
22164     +            string = '   DROP="'!!strip(DROP)!!'";';
22165     +            put string;
22166     +            put 'end;';
22167     +         run;
22168     +         filename x;
22169     +       proc datasets lib=work nolist;
22170     +          delete _DiffMeta;
22171     +       run;
22173     +       data &em_data_exportset;
22174     +          set &em_data_exportset;
22175     +          if NODEPORT='TRAIN' then do;
22176     +             ROLE="&em_property_role";
22177     +             COLUMNMETAMODTIME=datetime();
22178     +             MODTIME=datetime();
22179     +             DATASET="&em_nodeid._train";
22180     +             COLUMNMETA="&em_nodeid._CMeta_TRAIN";
22181     +             DELTACODE="CDelta_TRAIN";
22182     +             APPLYDELTA='Y';
22183     +             EXPORT='Y';
22184     +             NEEDUPDATE='Y';
22186     +            %if "&em_property_advancedadvisor" eq "Y" %then %do;
22187     +                EMINFO="&em_data_eminfo";
22188     +                EMINFOMODTIME=datetime();
22189     +            %end;
22190     +            %else %do;
22191     +                EMINFO='';
22192     +                EMINFOMODTIME=.;
22193     +            %end;
22194     +          end;
22195     +       run;
22196     +   %end;
22198     +  proc contents data=&em_user_data;
22199     +  run;
22200     +  proc datasets library=work nolist;
22201     +   delete importfile importattrs new;
22202     +   quit;
22203     +  run;
22205     +  /* Reset VALIDVARNAME to original settings */
22206     +  options validvarname=&vvnString;
22208     +  %endtrain:
22209     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(APPENDEXT):   data _null_;
MPRINT(APPENDEXT):   tempuif = trim("C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.txt");
MPRINT(APPENDEXT):   rfile = reverse(tempuif);
MPRINT(APPENDEXT):   period = indexc(rfile,".");
MPRINT(APPENDEXT):   uif = substr(tempuif, 1, length(tempuif)- period+1);
MPRINT(APPENDEXT):   newuif = trim(uif)||trim("csv");
MPRINT(APPENDEXT):   call symput("EM_USER_USERIMPORTFILE",newuif);
MPRINT(APPENDEXT):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   options validvarname=ANY;
MPRINT(PROCIMPORT):   proc import datafile=
filetype=*csv*
delimiter=*,*
MPRINT(PROCIMPORT):  "C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv" out=work.importfile dbms=csv replace;
MPRINT(PROCIMPORT):   ADLM;
MPRINT(PROCIMPORT):   getnames=Y;
MPRINT(PROCIMPORT):   delimiter=",";
MPRINT(PROCIMPORT):   guessingrows=500;
MPRINT(PROCIMPORT):   run;

Name Country / territory of asylum/residence truncated to Country / territory of asylum/re.
Name of which UNHCR-assisted(start-year) truncated to of which UNHCR-assisted(start-ye.
Name of which UNHCR-assisted(end-year) truncated to of which UNHCR-assisted(end-year.
Problems were detected with provided names.  See LOG. 
22210       /**********************************************************************
22211       *   PRODUCT:   SAS
22212       *   VERSION:   9.4
22213       *   CREATOR:   External File Interface
22214       *   DATE:      01NOV19
22215       *   DESC:      Generated SAS Datastep Code
22216       *   TEMPLATE SOURCE:  (None Specified.)
22217       ***********************************************************************/
22218          data WORK.IMPORTFILE    ;
MPRINT(PROCIMPORT):   data WORK.IMPORTFILE ;
22219          %let _EFIERR_ = 0; /* set the ERROR detection macro variable */
22220          infile 'C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv' delimiter = ',' MISSOVER DSD lrecl=32767 firstobs=2 ;
MPRINT(PROCIMPORT):   infile 'C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv' delimiter = ',' MISSOVER DSD lrecl=32767 firstobs=2 ;
22221             informat Year best32. ;
MPRINT(PROCIMPORT):   informat Year best32. ;
22222             informat "Country / territory of asylum/re"N $41. ;
MPRINT(PROCIMPORT):   informat "Country / territory of asylum/re"N $41. ;
22223             informat Origin $20. ;
MPRINT(PROCIMPORT):   informat Origin $20. ;
22224             informat "RSD procedure type / level"N $6. ;
MPRINT(PROCIMPORT):   informat "RSD procedure type / level"N $6. ;
22225             informat "Tota pending start-year"N best32. ;
MPRINT(PROCIMPORT):   informat "Tota pending start-year"N best32. ;
22226             informat "of which UNHCR-assisted(start-ye"N best32. ;
MPRINT(PROCIMPORT):   informat "of which UNHCR-assisted(start-ye"N best32. ;
22227             informat "Applied during year"N best32. ;
MPRINT(PROCIMPORT):   informat "Applied during year"N best32. ;
22228             informat decisions_recognized best32. ;
MPRINT(PROCIMPORT):   informat decisions_recognized best32. ;
22229             informat decisions_other best32. ;
MPRINT(PROCIMPORT):   informat decisions_other best32. ;
22230             informat Rejected best32. ;
MPRINT(PROCIMPORT):   informat Rejected best32. ;
22231             informat "Otherwise closed"N best32. ;
MPRINT(PROCIMPORT):   informat "Otherwise closed"N best32. ;
22232             informat "Total decisions"N best32. ;
MPRINT(PROCIMPORT):   informat "Total decisions"N best32. ;
22233             informat "Total pending end-year"N best32. ;
MPRINT(PROCIMPORT):   informat "Total pending end-year"N best32. ;
22234             informat "of which UNHCR-assisted(end-year"N best32. ;
MPRINT(PROCIMPORT):   informat "of which UNHCR-assisted(end-year"N best32. ;
22235             informat Successful best32. ;
MPRINT(PROCIMPORT):   informat Successful best32. ;
22236             informat Unsuccessful best32. ;
MPRINT(PROCIMPORT):   informat Unsuccessful best32. ;
22237             informat acceptance_rate best32. ;
MPRINT(PROCIMPORT):   informat acceptance_rate best32. ;
22238             informat "accepted/rejected"N best32. ;
MPRINT(PROCIMPORT):   informat "accepted/rejected"N best32. ;
22239             informat "Encoded procedure type"N best32. ;
MPRINT(PROCIMPORT):   informat "Encoded procedure type"N best32. ;
22240             informat "Encoded Target Country"N best32. ;
MPRINT(PROCIMPORT):   informat "Encoded Target Country"N best32. ;
22241             informat "Encoded Origin"N best32. ;
MPRINT(PROCIMPORT):   informat "Encoded Origin"N best32. ;
22242             format Year best12. ;
MPRINT(PROCIMPORT):   format Year best12. ;
22243             format "Country / territory of asylum/re"N $41. ;
MPRINT(PROCIMPORT):   format "Country / territory of asylum/re"N $41. ;
22244             format Origin $20. ;
MPRINT(PROCIMPORT):   format Origin $20. ;
22245             format "RSD procedure type / level"N $6. ;
MPRINT(PROCIMPORT):   format "RSD procedure type / level"N $6. ;
22246             format "Tota pending start-year"N best12. ;
MPRINT(PROCIMPORT):   format "Tota pending start-year"N best12. ;
22247             format "of which UNHCR-assisted(start-ye"N best12. ;
MPRINT(PROCIMPORT):   format "of which UNHCR-assisted(start-ye"N best12. ;
22248             format "Applied during year"N best12. ;
MPRINT(PROCIMPORT):   format "Applied during year"N best12. ;
22249             format decisions_recognized best12. ;
MPRINT(PROCIMPORT):   format decisions_recognized best12. ;
22250             format decisions_other best12. ;
MPRINT(PROCIMPORT):   format decisions_other best12. ;
22251             format Rejected best12. ;
MPRINT(PROCIMPORT):   format Rejected best12. ;
22252             format "Otherwise closed"N best12. ;
MPRINT(PROCIMPORT):   format "Otherwise closed"N best12. ;
22253             format "Total decisions"N best12. ;
MPRINT(PROCIMPORT):   format "Total decisions"N best12. ;
22254             format "Total pending end-year"N best12. ;
MPRINT(PROCIMPORT):   format "Total pending end-year"N best12. ;
22255             format "of which UNHCR-assisted(end-year"N best12. ;
MPRINT(PROCIMPORT):   format "of which UNHCR-assisted(end-year"N best12. ;
22256             format Successful best12. ;
MPRINT(PROCIMPORT):   format Successful best12. ;
22257             format Unsuccessful best12. ;
MPRINT(PROCIMPORT):   format Unsuccessful best12. ;
22258             format acceptance_rate best12. ;
MPRINT(PROCIMPORT):   format acceptance_rate best12. ;
22259             format "accepted/rejected"N best12. ;
MPRINT(PROCIMPORT):   format "accepted/rejected"N best12. ;
22260             format "Encoded procedure type"N best12. ;
MPRINT(PROCIMPORT):   format "Encoded procedure type"N best12. ;
22261             format "Encoded Target Country"N best12. ;
MPRINT(PROCIMPORT):   format "Encoded Target Country"N best12. ;
22262             format "Encoded Origin"N best12. ;
MPRINT(PROCIMPORT):   format "Encoded Origin"N best12. ;
22263          input
22264                      Year
22265                      "Country / territory of asylum/re"N $
22266                      Origin $
22267                      "RSD procedure type / level"N $
22268                      "Tota pending start-year"N
22269                      "of which UNHCR-assisted(start-ye"N
22270                      "Applied during year"N
22271                      decisions_recognized
22272                      decisions_other
22273                      Rejected
22274                      "Otherwise closed"N
22275                      "Total decisions"N
22276                      "Total pending end-year"N
22277                      "of which UNHCR-assisted(end-year"N
22278                      Successful
22279                      Unsuccessful
22280                      acceptance_rate
22281                      "accepted/rejected"N
22282                      "Encoded procedure type"N
22283                      "Encoded Target Country"N
22284                      "Encoded Origin"N
22285          ;
MPRINT(PROCIMPORT):   input Year "Country / territory of asylum/re"N $ Origin $ "RSD procedure type / level"N $ "Tota pending start-year"N "of which UNHCR-assisted(start-ye"N "Applied during year"N decisions_recognized decisions_other Rejected "Otherwise 
closed"N "Total decisions"N "Total pending end-year"N "of which UNHCR-assisted(end-year"N Successful Unsuccessful acceptance_rate "accepted/rejected"N "Encoded procedure type"N "Encoded Target Country"N "Encoded Origin"N ;
22286          if _ERROR_ then call symputx('_EFIERR_',1);  /* set ERROR detection macro variable */
MPRINT(PROCIMPORT):   if _ERROR_ then call symputx('_EFIERR_',1);
22287          run;
MPRINT(PROCIMPORT):   run;

NOTE: The infile 'C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv' is:
      Filename=C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv,
      RECFM=V,LRECL=32767,File Size (bytes)=12875788,
      Last Modified=01,November,2019 19:25:31,
      Create Time=01,November,2019 19:25:31

NOTE: 124566 records were read from the infile 'C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv'.
      The minimum record length was 83.
      The maximum record length was 195.
NOTE: The data set WORK.IMPORTFILE has 124566 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.24 seconds
      cpu time            0.21 seconds
      

124566 rows created in WORK.IMPORTFILE from C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv.
  
  
  
NOTE: WORK.IMPORTFILE data set was successfully created.
NOTE: The data set WORK.IMPORTFILE has 124566 observations and 21 variables.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.66 seconds
      cpu time            0.54 seconds
      

MPRINT(PROCIMPORT):    ;
MPRINT(TRAIN):   ;
MPRINT(TRAIN):   data EMWS1.FIMPORT_DATA;
MPRINT(TRAIN):   set work.importfile(obs=1000000);
MPRINT(TRAIN):   run;

NOTE: There were 124566 observations read from the data set WORK.IMPORTFILE.
NOTE: The data set EMWS1.FIMPORT_DATA has 124566 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
      

MPRINT(KEEPORDROP):   proc contents data=work.importfile noprint out=work.importattrs;
MPRINT(KEEPORDROP):   run;

NOTE: The data set WORK.IMPORTATTRS has 21 observations and 41 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

MPRINT(KEEPORDROP):  ;
MPRINT(KEEPORDROP):   data _null_;
MPRINT(KEEPORDROP):   set work.importattrs;
MPRINT(KEEPORDROP):   call symput("varname"||left(_n_),name);
MPRINT(KEEPORDROP):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      23:137   
NOTE: There were 21 observations read from the data set WORK.IMPORTATTRS.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

nobs=21  maxcols=10000
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets lib=EMWS1 nolist;
MPRINT(TRAIN):   delete FIMPORT_EMSTATDEFAULT FIMPORT_EMINFO;
MPRINT(TRAIN):   run;

NOTE: The file EMWS1.FIMPORT_EMSTATDEFAULT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file EMWS1.FIMPORT_EMINFO (memtype=DATA) was not found, but appears on a DELETE statement.

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;

22288      %let SYSCC = 0;
22289      %let _dsidTable = 0;
22290      %let _engineTable =;
22291      data _null_;
MPRINT(EMADVISECOLUMNS):    data _null_;
22292      dsid = open('EMWS1.FIMPORT_DATA');
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.FIMPORT_DATA');
22293      call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
22294      if dsid then do;
MPRINT(EMADVISECOLUMNS):   if dsid then do;
22295      call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
22296      dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
22297      end;
MPRINT(EMADVISECOLUMNS):   end;
22298      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

22299      options fmterr;
MPRINT(EMADVISECOLUMNS):    options fmterr;
22300      data _metaTestView;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
22301      set EMWS1.FIMPORT_DATA;
MPRINT(EMADVISECOLUMNS):   set EMWS1.FIMPORT_DATA;
22302      if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
22303      output;
MPRINT(EMADVISECOLUMNS):   output;
22304      stop;
MPRINT(EMADVISECOLUMNS):   stop;
22305      end;
MPRINT(EMADVISECOLUMNS):   end;
22306      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 1 observations read from the data set EMWS1.FIMPORT_DATA.
NOTE: The data set WORK._METATESTVIEW has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

22307      proc contents data=EMWS1.FIMPORT_DATA
22308      out=WORK.M0RPPGWY noprint;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.FIMPORT_DATA out=WORK.M0RPPGWY noprint;
22309      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: The data set WORK.M0RPPGWY has 21 observations and 41 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

22310      data WORK.M0RPPGWY;
MPRINT(EMADVISECOLUMNS):    data WORK.M0RPPGWY;
22311      length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
22312      label NAME =;
MPRINT(EMADVISECOLUMNS):   label NAME =;
22313      set WORK.M0RPPGWY(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   set WORK.M0RPPGWY(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
22314      if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
22315      else type = 'C';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
22316      if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
22317      if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
22318      if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
22319      else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
22320      end;
MPRINT(EMADVISECOLUMNS):   end;
22321      else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
22322      end;
MPRINT(EMADVISECOLUMNS):   end;
22323      else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
22324      if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
22325      if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
22326      if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
22327      else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
22328      end;
MPRINT(EMADVISECOLUMNS):   end;
22329      else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
22330      end;
MPRINT(EMADVISECOLUMNS):   end;
22331      else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
22332      if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
22333      else index = "Y";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
22334      indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
22335      drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
22336      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 21 observations read from the data set WORK.M0RPPGWY.
NOTE: The data set WORK.M0RPPGWY has 21 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

22337      data WORK.M0RPPGWY;
MPRINT(EMADVISECOLUMNS):    data WORK.M0RPPGWY;
22338      length UNAME $64;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
22339      set WORK.M0RPPGWY;
MPRINT(EMADVISECOLUMNS):   set WORK.M0RPPGWY;
22340      UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
22341      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 21 observations read from the data set WORK.M0RPPGWY.
NOTE: The data set WORK.M0RPPGWY has 21 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0_VQ_LS NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
22345      data WORK.M0_VQ_LS;
MPRINT(EMADVISECOLUMNS):    data WORK.M0_VQ_LS;
22346      drop UNAME;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
22347      set WORK.M0_VQ_LS;
MPRINT(EMADVISECOLUMNS):   set WORK.M0_VQ_LS;
22348      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 21 observations read from the data set WORK.M0_VQ_LS.
NOTE: The data set WORK.M0_VQ_LS has 21 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EMADVISECOLUMNS):    data WORK.M0UOU96H(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0_VQ_LS;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0_VQ_LS;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0_VQ_LS;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0_VQ_LS;
MPRINT(EMADVISECOLUMNS):   set WORK.M0_VQ_LS;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   label NEWNAME = "New Variable Name";
MPRINT(EMADVISECOLUMNS):   length NEWNAME $32;
MPRINT(EMADVISECOLUMNS):   NEWNAME=NAME;
MPRINT(EMADVISECOLUMNS):   if NAME ='Applied during year' then NEWNAME="Applied_during_year";
MPRINT(EMADVISECOLUMNS):   if NAME ='Country / territory of asylum/re' then NEWNAME="Country___territory_of_asylum_re";
MPRINT(EMADVISECOLUMNS):   if NAME ='Encoded Origin' then NEWNAME="Encoded_Origin";
MPRINT(EMADVISECOLUMNS):   if NAME ='Encoded Target Country' then NEWNAME="Encoded_Target_Country";
MPRINT(EMADVISECOLUMNS):   if NAME ='Encoded procedure type' then NEWNAME="Encoded_procedure_type";
MPRINT(EMADVISECOLUMNS):   if NAME ='Otherwise closed' then NEWNAME="Otherwise_closed";
MPRINT(EMADVISECOLUMNS):   if NAME ='RSD procedure type / level' then NEWNAME="RSD_procedure_type___level";
MPRINT(EMADVISECOLUMNS):   if NAME ='Tota pending start-year' then NEWNAME="Tota_pending_start_year";
MPRINT(EMADVISECOLUMNS):   if NAME ='Total decisions' then NEWNAME="Total_decisions";
MPRINT(EMADVISECOLUMNS):   if NAME ='Total pending end-year' then NEWNAME="Total_pending_end_year";
MPRINT(EMADVISECOLUMNS):   if NAME ='accepted/rejected' then NEWNAME="accepted_rejected";
MPRINT(EMADVISECOLUMNS):   if NAME ='of which UNHCR-assisted(end-year' then NEWNAME="of_which_UNHCR_assisted_end_year";
MPRINT(EMADVISECOLUMNS):   if NAME ='of which UNHCR-assisted(start-ye' then NEWNAME="of_which_UNHCR_assisted_start_ye";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.57 seconds
      cpu time            0.31 seconds
      

MPRINT(EMADVISECOLUMNS):   
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   fname = '_text';
MPRINT(TRAIN):   rc=filename(fname, "C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\VVNLABEL.sas");
MPRINT(TRAIN):   if ^rc and fexist(fname) then rc=fdelete(fname);
MPRINT(TRAIN):   rc=filename(fname);
MPRINT(TRAIN):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc contents data=work.importfile noprint out=work._any(keep=VARNUM NAME LABEL);
MPRINT(TRAIN):   run;

NOTE: The data set WORK._ANY has 21 observations and 3 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc sort data=work._any;
MPRINT(TRAIN):   by VARNUM;
MPRINT(TRAIN):   run;

NOTE: There were 21 observations read from the data set WORK._ANY.
NOTE: The data set WORK._ANY has 21 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   quit;
MPRINT(TRAIN):   options validvarname=V7;
MPRINT(PROCIMPORT):   proc import datafile=
filetype=*csv*
delimiter=*,*
MPRINT(PROCIMPORT):  "C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv" out=work.importfile2 dbms=csv replace;
MPRINT(PROCIMPORT):   ADLM;
MPRINT(PROCIMPORT):   getnames=Y;
MPRINT(PROCIMPORT):   delimiter=",";
MPRINT(PROCIMPORT):   guessingrows=500;
MPRINT(PROCIMPORT):   run;

Name Country / territory of asylum/residence truncated to Country___territory_of_asylum_re.
Name of which UNHCR-assisted(start-year) truncated to of_which_UNHCR_assisted_start_ye.
Name of which UNHCR-assisted(end-year) truncated to of_which_UNHCR_assisted_end_year.
Problems were detected with provided names.  See LOG. 
22615       /**********************************************************************
22616       *   PRODUCT:   SAS
22617       *   VERSION:   9.4
22618       *   CREATOR:   External File Interface
22619       *   DATE:      01NOV19
22620       *   DESC:      Generated SAS Datastep Code
22621       *   TEMPLATE SOURCE:  (None Specified.)
22622       ***********************************************************************/
22623          data WORK.IMPORTFILE2    ;
MPRINT(PROCIMPORT):   data WORK.IMPORTFILE2 ;
22624          %let _EFIERR_ = 0; /* set the ERROR detection macro variable */
22625          infile 'C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv' delimiter = ',' MISSOVER DSD lrecl=32767 firstobs=2 ;
MPRINT(PROCIMPORT):   infile 'C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv' delimiter = ',' MISSOVER DSD lrecl=32767 firstobs=2 ;
22626             informat Year best32. ;
MPRINT(PROCIMPORT):   informat Year best32. ;
22627             informat Country___territory_of_asylum_re $41. ;
MPRINT(PROCIMPORT):   informat Country___territory_of_asylum_re $41. ;
22628             informat Origin $20. ;
MPRINT(PROCIMPORT):   informat Origin $20. ;
22629             informat RSD_procedure_type___level $6. ;
MPRINT(PROCIMPORT):   informat RSD_procedure_type___level $6. ;
22630             informat Tota_pending_start_year best32. ;
MPRINT(PROCIMPORT):   informat Tota_pending_start_year best32. ;
22631             informat of_which_UNHCR_assisted_start_ye best32. ;
MPRINT(PROCIMPORT):   informat of_which_UNHCR_assisted_start_ye best32. ;
22632             informat Applied_during_year best32. ;
MPRINT(PROCIMPORT):   informat Applied_during_year best32. ;
22633             informat decisions_recognized best32. ;
MPRINT(PROCIMPORT):   informat decisions_recognized best32. ;
22634             informat decisions_other best32. ;
MPRINT(PROCIMPORT):   informat decisions_other best32. ;
22635             informat Rejected best32. ;
MPRINT(PROCIMPORT):   informat Rejected best32. ;
22636             informat Otherwise_closed best32. ;
MPRINT(PROCIMPORT):   informat Otherwise_closed best32. ;
22637             informat Total_decisions best32. ;
MPRINT(PROCIMPORT):   informat Total_decisions best32. ;
22638             informat Total_pending_end_year best32. ;
MPRINT(PROCIMPORT):   informat Total_pending_end_year best32. ;
22639             informat of_which_UNHCR_assisted_end_year best32. ;
MPRINT(PROCIMPORT):   informat of_which_UNHCR_assisted_end_year best32. ;
22640             informat Successful best32. ;
MPRINT(PROCIMPORT):   informat Successful best32. ;
22641             informat Unsuccessful best32. ;
MPRINT(PROCIMPORT):   informat Unsuccessful best32. ;
22642             informat acceptance_rate best32. ;
MPRINT(PROCIMPORT):   informat acceptance_rate best32. ;
22643             informat accepted_rejected best32. ;
MPRINT(PROCIMPORT):   informat accepted_rejected best32. ;
22644             informat Encoded_procedure_type best32. ;
MPRINT(PROCIMPORT):   informat Encoded_procedure_type best32. ;
22645             informat Encoded_Target_Country best32. ;
MPRINT(PROCIMPORT):   informat Encoded_Target_Country best32. ;
22646             informat Encoded_Origin best32. ;
MPRINT(PROCIMPORT):   informat Encoded_Origin best32. ;
22647             format Year best12. ;
MPRINT(PROCIMPORT):   format Year best12. ;
22648             format Country___territory_of_asylum_re $41. ;
MPRINT(PROCIMPORT):   format Country___territory_of_asylum_re $41. ;
22649             format Origin $20. ;
MPRINT(PROCIMPORT):   format Origin $20. ;
22650             format RSD_procedure_type___level $6. ;
MPRINT(PROCIMPORT):   format RSD_procedure_type___level $6. ;
22651             format Tota_pending_start_year best12. ;
MPRINT(PROCIMPORT):   format Tota_pending_start_year best12. ;
22652             format of_which_UNHCR_assisted_start_ye best12. ;
MPRINT(PROCIMPORT):   format of_which_UNHCR_assisted_start_ye best12. ;
22653             format Applied_during_year best12. ;
MPRINT(PROCIMPORT):   format Applied_during_year best12. ;
22654             format decisions_recognized best12. ;
MPRINT(PROCIMPORT):   format decisions_recognized best12. ;
22655             format decisions_other best12. ;
MPRINT(PROCIMPORT):   format decisions_other best12. ;
22656             format Rejected best12. ;
MPRINT(PROCIMPORT):   format Rejected best12. ;
22657             format Otherwise_closed best12. ;
MPRINT(PROCIMPORT):   format Otherwise_closed best12. ;
22658             format Total_decisions best12. ;
MPRINT(PROCIMPORT):   format Total_decisions best12. ;
22659             format Total_pending_end_year best12. ;
MPRINT(PROCIMPORT):   format Total_pending_end_year best12. ;
22660             format of_which_UNHCR_assisted_end_year best12. ;
MPRINT(PROCIMPORT):   format of_which_UNHCR_assisted_end_year best12. ;
22661             format Successful best12. ;
MPRINT(PROCIMPORT):   format Successful best12. ;
22662             format Unsuccessful best12. ;
MPRINT(PROCIMPORT):   format Unsuccessful best12. ;
22663             format acceptance_rate best12. ;
MPRINT(PROCIMPORT):   format acceptance_rate best12. ;
22664             format accepted_rejected best12. ;
MPRINT(PROCIMPORT):   format accepted_rejected best12. ;
22665             format Encoded_procedure_type best12. ;
MPRINT(PROCIMPORT):   format Encoded_procedure_type best12. ;
22666             format Encoded_Target_Country best12. ;
MPRINT(PROCIMPORT):   format Encoded_Target_Country best12. ;
22667             format Encoded_Origin best12. ;
MPRINT(PROCIMPORT):   format Encoded_Origin best12. ;
22668          input
22669                      Year
22670                      Country___territory_of_asylum_re $
22671                      Origin $
22672                      RSD_procedure_type___level $
22673                      Tota_pending_start_year
22674                      of_which_UNHCR_assisted_start_ye
22675                      Applied_during_year
22676                      decisions_recognized
22677                      decisions_other
22678                      Rejected
22679                      Otherwise_closed
22680                      Total_decisions
22681                      Total_pending_end_year
22682                      of_which_UNHCR_assisted_end_year
22683                      Successful
22684                      Unsuccessful
22685                      acceptance_rate
22686                      accepted_rejected
22687                      Encoded_procedure_type
22688                      Encoded_Target_Country
22689                      Encoded_Origin
22690          ;
MPRINT(PROCIMPORT):   input Year Country___territory_of_asylum_re $ Origin $ RSD_procedure_type___level $ Tota_pending_start_year of_which_UNHCR_assisted_start_ye Applied_during_year decisions_recognized decisions_other Rejected Otherwise_closed 
Total_decisions Total_pending_end_year of_which_UNHCR_assisted_end_year Successful Unsuccessful acceptance_rate accepted_rejected Encoded_procedure_type Encoded_Target_Country Encoded_Origin ;
22691          if _ERROR_ then call symputx('_EFIERR_',1);  /* set ERROR detection macro variable */
MPRINT(PROCIMPORT):   if _ERROR_ then call symputx('_EFIERR_',1);
22692          run;
MPRINT(PROCIMPORT):   run;

NOTE: The infile 'C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv' is:
      Filename=C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv,
      RECFM=V,LRECL=32767,File Size (bytes)=12875788,
      Last Modified=01,November,2019 19:25:31,
      Create Time=01,November,2019 19:25:31

NOTE: 124566 records were read from the infile 'C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv'.
      The minimum record length was 83.
      The maximum record length was 195.
NOTE: The data set WORK.IMPORTFILE2 has 124566 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.26 seconds
      cpu time            0.20 seconds
      

124566 rows created in WORK.IMPORTFILE2 from C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.csv.
  
  
  
NOTE: WORK.IMPORTFILE2 data set was successfully created.
NOTE: The data set WORK.IMPORTFILE2 has 124566 observations and 21 variables.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.57 seconds
      cpu time            0.46 seconds
      

MPRINT(PROCIMPORT):    ;
MPRINT(TRAIN):   ;
MPRINT(TRAIN):   options validvarname=ANY;
MPRINT(TRAIN):   proc contents data=work.importfile2 noprint out=work._v7(rename=(NAME=V7NAME) keep=VARNUM NAME LABEL);
MPRINT(TRAIN):   run;

NOTE: The data set WORK._V7 has 21 observations and 3 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc sort data=work._v7;
MPRINT(TRAIN):   by varnum;
MPRINT(TRAIN):   run;

NOTE: There were 21 observations read from the data set WORK._V7.
NOTE: The data set WORK._V7 has 21 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   quit;
MPRINT(TRAIN):   filename _FI "C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\VVNLABEL.sas";
MPRINT(TRAIN):   data work._names;
MPRINT(TRAIN):   length string $200;
MPRINT(TRAIN):   merge work._v7 work._any;
MPRINT(TRAIN):   by VARNUM;
MPRINT(TRAIN):   file _FI;
MPRINT(TRAIN):   if V7NAME ne NAME then do;
MPRINT(TRAIN):   string = trim(V7NAME)!!'= "'!!tranwrd(trim(NAME), '"', '""')!!'"n;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   if LABEL eq '' then do;
MPRINT(TRAIN):   string = 'Label '!!trim(V7NAME)!!"='"!!tranwrd(trim(NAME), "'", "''")!!"';";
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   string='drop "'!!tranwrd(trim(NAME), '"', '""')!!'"n;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   drop string;
MPRINT(TRAIN):   run;

NOTE: The file _FI is:
      Filename=C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\VVNLABEL.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=01,November,2019 19:52:28,
      Create Time=01,November,2019 19:25:35

NOTE: 39 records were written to the file _FI.
      The minimum record length was 23.
      The maximum record length was 74.
NOTE: There were 21 observations read from the data set WORK._V7.
NOTE: There were 21 observations read from the data set WORK._ANY.
NOTE: The data set WORK._NAMES has 21 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):   data EMWS1.FIMPORT_DATA;
MPRINT(TRAIN):   set EMWS1.FIMPORT_DATA;
MPRINT(TRAIN):   filename _FI "C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\VVNLABEL.sas";
NOTE: %INCLUDE (level 1) file _FI is file C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\VVNLABEL.sas.
22693     +Country___territory_of_asylum_re= "Country / territory of asylum/re"n;
MPRINT(TRAIN):   Country___territory_of_asylum_re= "Country / territory of asylum/re"n;
22694     +Label Country___territory_of_asylum_re='Country / territory of asylum/re';
MPRINT(TRAIN):   Label Country___territory_of_asylum_re= 'Country / territory of asylum/re';
22695     +drop "Country / territory of asylum/re"n;
MPRINT(TRAIN):   drop "Country / territory of asylum/re"n;
22696     +RSD_procedure_type___level= "RSD procedure type / level"n;
MPRINT(TRAIN):   RSD_procedure_type___level= "RSD procedure type / level"n;
22697     +Label RSD_procedure_type___level='RSD procedure type / level';
MPRINT(TRAIN):   Label RSD_procedure_type___level= 'RSD procedure type / level';
22698     +drop "RSD procedure type / level"n;
MPRINT(TRAIN):   drop "RSD procedure type / level"n;
22699     +Tota_pending_start_year= "Tota pending start-year"n;
MPRINT(TRAIN):   Tota_pending_start_year= "Tota pending start-year"n;
22700     +Label Tota_pending_start_year='Tota pending start-year';
MPRINT(TRAIN):   Label Tota_pending_start_year= 'Tota pending start-year';
22701     +drop "Tota pending start-year"n;
MPRINT(TRAIN):   drop "Tota pending start-year"n;
22702     +of_which_UNHCR_assisted_start_ye= "of which UNHCR-assisted(start-ye"n;
MPRINT(TRAIN):   of_which_UNHCR_assisted_start_ye= "of which UNHCR-assisted(start-ye"n;
22703     +Label of_which_UNHCR_assisted_start_ye='of which UNHCR-assisted(start-ye';
MPRINT(TRAIN):   Label of_which_UNHCR_assisted_start_ye= 'of which UNHCR-assisted(start-ye';
22704     +drop "of which UNHCR-assisted(start-ye"n;
MPRINT(TRAIN):   drop "of which UNHCR-assisted(start-ye"n;
22705     +Applied_during_year= "Applied during year"n;
MPRINT(TRAIN):   Applied_during_year= "Applied during year"n;
22706     +Label Applied_during_year='Applied during year';
MPRINT(TRAIN):   Label Applied_during_year= 'Applied during year';
22707     +drop "Applied during year"n;
MPRINT(TRAIN):   drop "Applied during year"n;
22708     +Otherwise_closed= "Otherwise closed"n;
MPRINT(TRAIN):   Otherwise_closed= "Otherwise closed"n;
22709     +Label Otherwise_closed='Otherwise closed';
MPRINT(TRAIN):   Label Otherwise_closed= 'Otherwise closed';
22710     +drop "Otherwise closed"n;
MPRINT(TRAIN):   drop "Otherwise closed"n;
22711     +Total_decisions= "Total decisions"n;
MPRINT(TRAIN):   Total_decisions= "Total decisions"n;
22712     +Label Total_decisions='Total decisions';
MPRINT(TRAIN):   Label Total_decisions= 'Total decisions';
22713     +drop "Total decisions"n;
MPRINT(TRAIN):   drop "Total decisions"n;
22714     +Total_pending_end_year= "Total pending end-year"n;
MPRINT(TRAIN):   Total_pending_end_year= "Total pending end-year"n;
22715     +Label Total_pending_end_year='Total pending end-year';
MPRINT(TRAIN):   Label Total_pending_end_year= 'Total pending end-year';
22716     +drop "Total pending end-year"n;
MPRINT(TRAIN):   drop "Total pending end-year"n;
22717     +of_which_UNHCR_assisted_end_year= "of which UNHCR-assisted(end-year"n;
MPRINT(TRAIN):   of_which_UNHCR_assisted_end_year= "of which UNHCR-assisted(end-year"n;
22718     +Label of_which_UNHCR_assisted_end_year='of which UNHCR-assisted(end-year';
MPRINT(TRAIN):   Label of_which_UNHCR_assisted_end_year= 'of which UNHCR-assisted(end-year';
22719     +drop "of which UNHCR-assisted(end-year"n;
MPRINT(TRAIN):   drop "of which UNHCR-assisted(end-year"n;
22720     +accepted_rejected= "accepted/rejected"n;
MPRINT(TRAIN):   accepted_rejected= "accepted/rejected"n;
22721     +Label accepted_rejected='accepted/rejected';
MPRINT(TRAIN):   Label accepted_rejected= 'accepted/rejected';
22722     +drop "accepted/rejected"n;
MPRINT(TRAIN):   drop "accepted/rejected"n;
22723     +Encoded_procedure_type= "Encoded procedure type"n;
MPRINT(TRAIN):   Encoded_procedure_type= "Encoded procedure type"n;
22724     +Label Encoded_procedure_type='Encoded procedure type';
MPRINT(TRAIN):   Label Encoded_procedure_type= 'Encoded procedure type';
22725     +drop "Encoded procedure type"n;
MPRINT(TRAIN):   drop "Encoded procedure type"n;
22726     +Encoded_Target_Country= "Encoded Target Country"n;
MPRINT(TRAIN):   Encoded_Target_Country= "Encoded Target Country"n;
22727     +Label Encoded_Target_Country='Encoded Target Country';
MPRINT(TRAIN):   Label Encoded_Target_Country= 'Encoded Target Country';
22728     +drop "Encoded Target Country"n;
MPRINT(TRAIN):   drop "Encoded Target Country"n;
22729     +Encoded_Origin= "Encoded Origin"n;
MPRINT(TRAIN):   Encoded_Origin= "Encoded Origin"n;
22730     +Label Encoded_Origin='Encoded Origin';
MPRINT(TRAIN):   Label Encoded_Origin= 'Encoded Origin';
22731     +drop "Encoded Origin"n;
MPRINT(TRAIN):   drop "Encoded Origin"n;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename _FI;
NOTE: Fileref _FI has been deassigned.
MPRINT(TRAIN):   run;

NOTE: There were 124566 observations read from the data set EMWS1.FIMPORT_DATA.
NOTE: The data set EMWS1.FIMPORT_DATA has 124566 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
      

MPRINT(TRAIN):   proc sort data=EMWS1.FIMPORT_EMCMETADEFAULT;
MPRINT(TRAIN):   by NAME;
MPRINT(TRAIN):   run;

NOTE: There were 21 observations read from the data set EMWS1.FIMPORT_EMCMETADEFAULT.
NOTE: The data set EMWS1.FIMPORT_EMCMETADEFAULT has 21 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc sort data=work._names;
MPRINT(TRAIN):   by NAME;
MPRINT(TRAIN):   run;

NOTE: There were 21 observations read from the data set WORK._NAMES.
NOTE: The data set WORK._NAMES has 21 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   data EMWS1.FIMPORT_EMCMETADEFAULT;
MPRINT(TRAIN):   merge EMWS1.FIMPORT_EMCMETADEFAULT _names;
MPRINT(TRAIN):   by NAME;
MPRINT(TRAIN):   length DROP $1;
MPRINT(TRAIN):   DROP='N';
MPRINT(TRAIN):   if NEWNAME ne NAME then do;
MPRINT(TRAIN):   if LABEL eq '' then do;
MPRINT(TRAIN):   LABEL = NAME;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   NAME=V7NAME;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   drop NEWNAME V7NAME VARNUM;
MPRINT(TRAIN):   run;

NOTE: There were 21 observations read from the data set EMWS1.FIMPORT_EMCMETADEFAULT.
NOTE: There were 21 observations read from the data set WORK._NAMES.
NOTE: The data set EMWS1.FIMPORT_EMCMETADEFAULT has 21 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc datasets lib=work nolist;
MPRINT(TRAIN):   delete _any _v7 _names importfile2;
MPRINT(TRAIN):   run;

NOTE: Deleting WORK._ANY (memtype=DATA).
NOTE: Deleting WORK._V7 (memtype=DATA).
NOTE: Deleting WORK._NAMES (memtype=DATA).
NOTE: Deleting WORK.IMPORTFILE2 (memtype=DATA).
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EMADVISETABLE):   proc display c=sashelp.emmeta.advisetable.scl;
MPRINT(EMADVISETABLE):   run;

22732      %let SYSCC = 0;
22733      data EMWS1.FIMPORT_EMTMETADEFAULT;
MPRINT(EMADVISETABLE):    data EMWS1.FIMPORT_EMTMETADEFAULT;
22734      length LIBNAME $8;
MPRINT(EMADVISETABLE):   length LIBNAME $8;
22735      LIBNAME = "EMWS1";
MPRINT(EMADVISETABLE):   LIBNAME = "EMWS1";
22736      run;
MPRINT(EMADVISETABLE):   run;

NOTE: The data set EMWS1.FIMPORT_EMTMETADEFAULT has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EMADVISETABLE):    data _null_;
MPRINT(EMADVISETABLE):   dsid = open("EMWS1.FIMPORT_DATA");
MPRINT(EMADVISETABLE):   call symput("_DSID", put(dsid,BEST.));
MPRINT(EMADVISETABLE):   if dsid > 0 then dsid = close(dsid);
MPRINT(EMADVISETABLE):   run;
MPRINT(EMADVISETABLE):    ods output enginehost=em_tablehost;
MPRINT(EMADVISETABLE):   ods listing close;
MPRINT(EMADVISETABLE):   proc contents data=EMWS1.FIMPORT_DATA;
MPRINT(EMADVISETABLE):   run;
MPRINT(EMADVISETABLE):   ods listing;
MPRINT(EMADVISETABLE):    data WORK.M2Q2PW3B;
MPRINT(EMADVISETABLE):   length MEMNAME $ 32 MEMTYPE $ 8 MEMLABEL $ 256 TYPEMEM $ 8 ENGINE $ 8 CRDATE 8 MODATE 8 NOBS 8 NCOLS 8 NBYTES 8 ROLE $ 20 USEEXTERNALDATA $1 SAMPLINGRATE 8 SEGMENT $ 20;
MPRINT(EMADVISETABLE):   set WORK.M2Q2PW3B(obs=1);
MPRINT(EMADVISETABLE):   nobs = 124566;
MPRINT(EMADVISETABLE):   ncols = 21;
MPRINT(EMADVISETABLE):   nbytes = 27001856;
MPRINT(EMADVISETABLE):   memname = "FIMPORT_DATA";
MPRINT(EMADVISETABLE):   memtype = "DATA    ";
MPRINT(EMADVISETABLE):   memlabel = "";
MPRINT(EMADVISETABLE):   typemem = "DATA    ";
MPRINT(EMADVISETABLE):   engine = "V9      ";
MPRINT(EMADVISETABLE):   crdate = 1888257148.353;
MPRINT(EMADVISETABLE):   modate = 1888257148.353;
MPRINT(EMADVISETABLE):   format crdate datetime16.;
MPRINT(EMADVISETABLE):   format modate datetime16.;
MPRINT(EMADVISETABLE):   if role = ' ' then role = 'TRAIN';
MPRINT(EMADVISETABLE):   output;
MPRINT(EMADVISETABLE):   run;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.19 seconds
      cpu time            0.15 seconds
      

MPRINT(EMADVISETABLE):   
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data _temp;
MPRINT(TRAIN):   set EMWS1.FIMPORT_EMTMETADEFAULT(rename=(ROLE=PORT MEMNAME=DATASET CRDATE=MODTIME));
MPRINT(TRAIN):   keep PORT LIBNAME DATASET MODTIME COLUMNMETA COLUMNMETAMODTIME NOBS;
MPRINT(TRAIN):   PORT='DATA';
MPRINT(TRAIN):   COLUMNMETA="FIMPORT_EMCMETADEFAULT";
MPRINT(TRAIN):   COLUMNMETAMODTIME=MODTIME;
MPRINT(TRAIN):   run;

NOTE: There were 1 observations read from the data set EMWS1.FIMPORT_EMTMETADEFAULT.
NOTE: The data set WORK._TEMP has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc sort data=EMWS1.FIMPORT_ImportSet;
MPRINT(TRAIN):   by PORT;
MPRINT(TRAIN):   run;

NOTE: There were 15 observations read from the data set EMWS1.FIMPORT_IMPORTSET.
NOTE: The data set EMWS1.FIMPORT_IMPORTSET has 15 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):   data EMWS1.FIMPORT_ImportSet;
MPRINT(TRAIN):   merge EMWS1.FIMPORT_ImportSet _temp;
MPRINT(TRAIN):   by PORT;
MPRINT(TRAIN):   if PORT='DATA' then ROLE="TRAIN";
MPRINT(TRAIN):   run;

NOTE: There were 15 observations read from the data set EMWS1.FIMPORT_IMPORTSET.
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set EMWS1.FIMPORT_IMPORTSET has 15 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x "C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\VARIABLESETDELTA.txt";
MPRINT(TRAIN):   data EMWS1.FIMPORT_VariableSet;
MPRINT(TRAIN):   set EMWS1.FIMPORT_EMCMETADEFAULT;
NOTE: %INCLUDE (level 1) file X is file C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\VARIABLESETDELTA.txt.
22765     +if NAME="Rejected" then do;
MPRINT(TRAIN):   if NAME="Rejected" then do;
22766     +ROLE="INPUT";
MPRINT(TRAIN):   ROLE="INPUT";
22767     +LEVEL="INTERVAL";
MPRINT(TRAIN):   LEVEL="INTERVAL";
22768     +ORDER="";
MPRINT(TRAIN):   ORDER="";
22769     +DROP="N";
MPRINT(TRAIN):   DROP="N";
22770     +end;
MPRINT(TRAIN):   end;
22771     +if NAME="acceptance_rate" then do;
MPRINT(TRAIN):   if NAME="acceptance_rate" then do;
22772     +ROLE="TARGET";
MPRINT(TRAIN):   ROLE="TARGET";
22773     +LEVEL="INTERVAL";
MPRINT(TRAIN):   LEVEL="INTERVAL";
22774     +ORDER="";
MPRINT(TRAIN):   ORDER="";
22775     +DROP="N";
MPRINT(TRAIN):   DROP="N";
22776     +end;
MPRINT(TRAIN):   end;
22777     +if NAME="accepted_rejected" then do;
MPRINT(TRAIN):   if NAME="accepted_rejected" then do;
22778     +ROLE="INPUT";
MPRINT(TRAIN):   ROLE="INPUT";
22779     +LEVEL="BINARY";
MPRINT(TRAIN):   LEVEL="BINARY";
22780     +ORDER="";
MPRINT(TRAIN):   ORDER="";
22781     +DROP="N";
MPRINT(TRAIN):   DROP="N";
22782     +end;
MPRINT(TRAIN):   end;
22783     +if NAME="decisions_other" then do;
MPRINT(TRAIN):   if NAME="decisions_other" then do;
22784     +ROLE="INPUT";
MPRINT(TRAIN):   ROLE="INPUT";
22785     +LEVEL="INTERVAL";
MPRINT(TRAIN):   LEVEL="INTERVAL";
22786     +ORDER="";
MPRINT(TRAIN):   ORDER="";
22787     +DROP="N";
MPRINT(TRAIN):   DROP="N";
22788     +end;
MPRINT(TRAIN):   end;
22789     +if NAME="decisions_recognized" then do;
MPRINT(TRAIN):   if NAME="decisions_recognized" then do;
22790     +ROLE="INPUT";
MPRINT(TRAIN):   ROLE="INPUT";
22791     +LEVEL="INTERVAL";
MPRINT(TRAIN):   LEVEL="INTERVAL";
22792     +ORDER="";
MPRINT(TRAIN):   ORDER="";
22793     +DROP="N";
MPRINT(TRAIN):   DROP="N";
22794     +end;
MPRINT(TRAIN):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   run;

NOTE: There were 21 observations read from the data set EMWS1.FIMPORT_EMCMETADEFAULT.
NOTE: The data set EMWS1.FIMPORT_VARIABLESET has 21 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(TRAIN):   proc compare compare=EMWS1.FIMPORT_VariableSet base=EMWS1.FIMPORT_EMCMETADEFAULT noprint outnoequal outbase outcomp out=_DiffMeta noprint;
MPRINT(TRAIN):   id NAME;
MPRINT(TRAIN):   run;

NOTE: There were 21 observations read from the data set EMWS1.FIMPORT_VARIABLESET.
NOTE: There were 21 observations read from the data set EMWS1.FIMPORT_EMCMETADEFAULT.
NOTE: The data set WORK._DIFFMETA has 10 observations and 23 variables.
NOTE: PROCEDURE COMPARE used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   filename x1 "C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\CDELTA_TRAIN.sas";
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   length string $200;
MPRINT(TRAIN):   set _DiffMeta end=eof;
MPRINT(TRAIN):   where _type_='COMPARE';
MPRINT(TRAIN):   file x1;
MPRINT(TRAIN):   string = 'if NAME="'!!strip(NAME)!!'" then do;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ROLE="'!!strip(ROLE)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string= '   LEVEL="'!!strip(LEVEL)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ORDER="'!!strip(ORDER)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   put 'end;';
MPRINT(TRAIN):   if drop='Y' then do;
MPRINT(TRAIN):   string='if NAME="'!!strip(NAME)!!'" then delete;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   if eof then put 'drop DROP;';
MPRINT(TRAIN):   run;

NOTE: The file X1 is:
      Filename=C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=01,November,2019 19:52:28,
      Create Time=01,November,2019 19:24:12

NOTE: 26 records were written to the file X1.
      The minimum record length was 4.
      The maximum record length was 39.
NOTE: There were 5 observations read from the data set WORK._DIFFMETA.
      WHERE _type_='COMPARE';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x2 "C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\DELTACODE.txt";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file x2 lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x1",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file X2 is:
      Filename=C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\DELTACODE.txt,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=01,November,2019 19:52:28,
      Create Time=01,November,2019 19:25:36

NOTE: 26 records were written to the file X2.
      The minimum record length was 4.
      The maximum record length was 39.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x1;
NOTE: Fileref X1 has been deassigned.
MPRINT(TRAIN):   filename x2;
NOTE: Fileref X2 has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x "C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\VARIABLESETDELTA.txt";
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   length string $200;
MPRINT(TRAIN):   set _DiffMeta end=eof;
MPRINT(TRAIN):   where _type_='COMPARE';
MPRINT(TRAIN):   file x;
MPRINT(TRAIN):   string = 'if NAME="'!!strip(NAME)!!'" then do;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ROLE="'!!strip(ROLE)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string= '   LEVEL="'!!strip(LEVEL)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ORDER="'!!strip(ORDER)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   DROP="'!!strip(DROP)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   put 'end;';
MPRINT(TRAIN):   run;

NOTE: The file X is:
      Filename=C:\Users\Darren\Desktop\SMU\Term 3A\DM\Group Project\project_asylum\Workspaces\EMWS1\FIMPORT\VARIABLESETDELTA.txt,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=01,November,2019 19:52:28,
      Create Time=01,November,2019 19:25:36

NOTE: 30 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 39.
NOTE: There were 5 observations read from the data set WORK._DIFFMETA.
      WHERE _type_='COMPARE';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(TRAIN):   proc datasets lib=work nolist;
MPRINT(TRAIN):   delete _DiffMeta;
MPRINT(TRAIN):   run;

NOTE: Deleting WORK._DIFFMETA (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   data EMWS1.FIMPORT_ExportSet;
MPRINT(TRAIN):   set EMWS1.FIMPORT_ExportSet;
MPRINT(TRAIN):   if NODEPORT='TRAIN' then do;
MPRINT(TRAIN):   ROLE="TRAIN";
MPRINT(TRAIN):   COLUMNMETAMODTIME=datetime();
MPRINT(TRAIN):   MODTIME=datetime();
MPRINT(TRAIN):   DATASET="FIMPORT_train";
MPRINT(TRAIN):   COLUMNMETA="FIMPORT_CMeta_TRAIN";
MPRINT(TRAIN):   DELTACODE="CDelta_TRAIN";
MPRINT(TRAIN):   APPLYDELTA='Y';
MPRINT(TRAIN):   EXPORT='Y';
MPRINT(TRAIN):   NEEDUPDATE='Y';
MPRINT(TRAIN):   EMINFO='';
MPRINT(TRAIN):   EMINFOMODTIME=.;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   run;

NOTE: There were 6 observations read from the data set EMWS1.FIMPORT_EXPORTSET.
NOTE: The data set EMWS1.FIMPORT_EXPORTSET has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc contents data=EMWS1.FIMPORT_DATA;
MPRINT(TRAIN):   run;

NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
NOTE: The PROCEDURE CONTENTS printed page 2.

MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete importfile importattrs new;
MPRINT(TRAIN):   quit;

NOTE: The file WORK.NEW (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.IMPORTFILE (memtype=DATA).
NOTE: Deleting WORK.IMPORTATTRS (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   run;
MPRINT(TRAIN):   options validvarname=V7;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: FIMPORT;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22795      *------------------------------------------------------------*;
22796      * End TRAIN: FIMPORT;
22797      *------------------------------------------------------------*;

22798      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22799      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
22800      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22801      ;
MPRINT(EM_DIAGRAM):   ;
22802      ;
MPRINT(EM_DIAGRAM):   ;
22803      ;
MPRINT(EM_DIAGRAM):   ;
22804      ;
MPRINT(EM_DIAGRAM):   ;
22805      quit;
MPRINT(EM_DIAGRAM):   quit;
22806      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22807      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
22808      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22809      /*; *"; *'; */
22810      ;
MPRINT(EM_DIAGRAM):   ;
22811      run;
MPRINT(EM_DIAGRAM):   run;
22812      quit;
MPRINT(EM_DIAGRAM):   quit;
22813      /* Reset EM Options */
22814      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
22815      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
22816      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
